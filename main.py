
import imaplib
import smtplib
import email
import time
import asyncio
from email.mime.text import MIMEText
import os
from dotenv import load_dotenv


# üîπ –î–æ—Å—Ç—É–ø –∫ –ø–æ—á—Ç–µ
IMAP_SERVER = "imap.gmail.com"
SMTP_SERVER = "smtp.gmail.com"

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()
# –ß–∏—Ç–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
EMAIL = os.getenv("EMAIL")
PASSWORD = os.getenv("PASSWORD")

from g4f.client import Client
client = Client()



def get_latest_email(mail):
    mail.select("inbox")
    _, data = mail.search(None, "UNSEEN")  # –¢–æ–ª—å–∫–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞
    mail_ids = data[0].split()

    if not mail_ids:
        return None, None, None
        
    latest_email_id = mail_ids[-1]  # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–∏—Å—å–º–æ
    _, msg_data = mail.fetch(latest_email_id, "(RFC822)")
    msg = email.message_from_bytes(msg_data[0][1])

    sender = msg["From"]
    subject = msg["Subject"]
    body = ""

    if msg.is_multipart():
        for part in msg.walk():
            if part.get_content_type() == "text/plain":
                body = part.get_payload(decode=True).decode("utf-8")
    else:
        body = msg.get_payload(decode=True).decode("utf-8")
        
    mail.store(latest_email_id, "+FLAGS", "\\Seen")  # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ


    return sender, subject, body.strip()



def send_email(to_email, subject, body):
    msg = MIMEText(body)
    msg["From"] = EMAIL
    msg["To"] = to_email
    msg["Subject"] = subject

    try:
        with smtplib.SMTP_SSL(SMTP_SERVER, 465) as server:
            server.login(EMAIL, PASSWORD)
            server.sendmail(EMAIL, to_email, msg.as_string())
            return True
    except Exception as e:
        print("Error sending email:", e)
        return False


async def get_g4f_response_async(prompt, timeout=20):
    collected_response = ""
    start_time = time.time()

    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": prompt}],
            web_search=True,
            stream=True  # –ü–æ—Ç–æ–∫–æ–≤—ã–π –≤—ã–≤–æ–¥
        )

        for chunk in response:
            if chunk.choices and chunk.choices[0].delta.content:
                collected_response += chunk.choices[0].delta.content
            
            if time.time() - start_time > timeout:
                collected_response += " [–û—Ç–≤–µ—Ç –æ–±—Ä–µ–∑–∞–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É]"
                break

    except Exception as e:
        collected_response = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}"

    return collected_response.strip() if collected_response else "–û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω"

def get_g4f_response(prompt):
    return asyncio.run(get_g4f_response_async(prompt))

def check_and_reply(mail):
    try:
        sender, subject, question = get_latest_email(mail)
    except Exception as e:
        print('–û—à–∏–±–∫–∞')
        return None
    if sender and question:
        print(f"üì© –ù–æ–≤–æ–µ –ø–∏—Å—å–º–æ –æ—Ç {sender}, —Ç–µ–º–∞: {subject}, —Ç–µ–∫—Å—Ç: {question}")
        
        response = get_g4f_response(question)
        print(f"‚úÖ –û—Ç–≤–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω: {response}")

        send_email(sender, f"Re: {subject}", response)
        print(f"üì® –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {response}")


def wait_for_email():
    mail = imaplib.IMAP4_SSL(IMAP_SERVER)
    mail.login(EMAIL, PASSWORD)
    while True:
        print("‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –ø–∏—Å—å–º–∞...")
        check_and_reply(mail)  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º
        time.sleep(10)  # –ñ–¥—ë–º 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π


# üìå –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
wait_for_email()